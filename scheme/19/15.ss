(load "~/code/advent/load.ss")
(advent-year 19)
(advent-day 15)

(import (prefix (pairing-heap) h:))

(define intcode
  (parse-advent comma-separated))

(define north 1)
(define south 2)
(define east 4)
(define west 3)
(define wall 0)
(define moved 1)
(define oxygen-system 2)

(define (news z)
  `(,(+ z 1) ,(- z 1) ,(+ z 0+i) ,(+ z 0-i)))

(define (dir->instr z)
  (match z
    (1 east)
    (-1 west)
    (0+i north)
    (0-i south)))

(define g (make-eqv-hashtable))
(define m (cpu intcode))
(define loc 0)
(define *tank*)

(define (random-element lst)
  (list-ref lst (random (length lst))))

(define (next loc)
  (define options '())
  (define new '())
  (filter (lambda (z)
            (match (hashtable-ref g z 'idk)
              ('idk (push! z new))
              ('wall (void))
              ('open (push! z options))
              ('tank (push! z options))))
          (news loc))
  (if (null? new)
      (random-element options)
      (random-element new)))

(define (random-walk loc m j)
  (unless (zero? j)
    (let ((z (next loc)))
      (m 'in (dir->instr (- z loc)))
      (run-until-halt m)
      (match (read-output m)
        ((0) (hashtable-set! g z 'wall) (random-walk loc m (1- j)))
        ((1) (hashtable-set! g z 'open) (random-walk z m (1- j)))
        ((2) (hashtable-set! g z 'tank) (set! *tank* z) (random-walk z m (1- j)))))))

(define (part-a)
  (car
   (find (lambda (x)
           (eqv? *tank* (cdr x)))
         (search-bfs 0))))

(define (part-b)
  (caar (search-bfs *tank*)))

(define (solve lim)
  (random-walk 0 m lim)
  (display-ln (list (part-a)
                    (part-b))))


(define (search-bfs loc)
  (define seen (make-eqv-hashtable))
  (define q (q:snocq q:empty (cons 0 loc)))
  (define n 0)
  (define found #f)
  (define chart '())
  (let loop ()
    (unless (q:empty? q)
      (inc! n)
      (match (q:headq q)
        ((d . z)
         (set! q (q:tailq q))
         (push! (cons d z) chart)
         (for-all (lambda (z)
                    (match (hashtable-ref g z 'idk)
                      ('open
                       (unless (hashtable-ref seen z #f)
                         (hashtable-set! seen z #t)
                         (set! q (q:snocq q (cons (1+ d) z)))))
                      ('tank
                       (unless (hashtable-ref seen z #f)
                         (hashtable-set! seen z #t)
                         (set! q (q:snocq q (cons (1+ d) z)))))
                      (else (void))))
                  (news z))))
      (loop)))
  chart)

(define (showme)
  (define lo -25)
  (define hi 25)
  (do ((i lo (1+ i)))
      ((= i hi))
    (do ((j lo (1+ j)))
        ((= j hi) (newline))
      (if (and (zero? i)
               (zero? j))
          (display-with-foreground 'red #\H)
          (match (hashtable-ref g (make-rectangular i j) 'idk)
            ('idk (display-with-foreground 'blue #\?))
            ('wall (display-with-foreground 'green #\#))
            ('open (display #\space))
            ('tank (display-with-foreground 'red #\T)))))))
