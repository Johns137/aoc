(load "~/code/advent/load.ss")
(advent-year 19)
(advent-day 15)

(define intcode
  (parse-advent comma-separated))

(define north 1)
(define south 2)
(define east 4)
(define west 3)
(define wall 0)
(define moved 1)
(define oxygen-system 2)

(define (news z)
  `(,(+ z 1) ,(- z 1) ,(+ z 0+i) ,(+ z 0-i)))

(define (dir->instr z)
  (match z
    (1 east)
    (-1 west)
    (0+i north)
    (0-i south)))

(define g (make-eqv-hashtable))
(define m (cpu intcode))
(define loc 0)
(define *tank*)

(define (random-element lst)
  (list-ref lst (random (length lst))))

(define (random-walk)
  (define loc 0)
  (define m (cpu intcode))
  (define j 0)
  (define frontier (make-eqv-hashtable))
  (define (next loc)
    (define options '())
    (define new '())
    (for-all (lambda (z)
               (match (hashtable-ref g z 'idk)
                 ('idk (push! z new) (hashtable-set! frontier z #t))
                 ('wall (hashtable-delete! frontier z))
                 ('open (push! z options) (hashtable-delete! frontier z))
                 ('tank (push! z options) (hashtable-delete! frontier z))))
             (news loc))
    (if (null? new)
        (random-element options)
        (random-element new)))
  (let walk ()
    (inc! j)
    (let ((loc* (next loc)))
      (m 'in (dir->instr (- loc* loc)))
      (run-until-halt m)
      (match (read-output m)
        ((0) (hashtable-set! g loc* 'wall))
        ((1) (hashtable-set! g loc* 'open) (set! loc loc*))
        ((2) (hashtable-set! g loc* 'tank) (set! loc loc*) (set! *tank* loc)))
      (when (zero? (hashtable-size frontier))
        (showme loc)
        (format #t "~a ~a~%" j (hashtable-size frontier)))
      (unless (zero? (hashtable-size frontier))
        (when (zero? (mod j 10000))
          (showme loc)
          (format #t "~a ~a~%" j (hashtable-size frontier)))
        (walk)))))

(define (drunken-walk)
  (define loc 0)
  (define m (cpu intcode))
  (define j 0)
  (define frontier (make-eqv-hashtable))
  (define (next loc)
    (define options '())
    (define new '())
    (for-all (lambda (z)
               (match (hashtable-ref g z 'idk)
                 ('idk (push! z new) (hashtable-set! frontier z #t))
                 ('wall (hashtable-delete! frontier z))
                 ('open (push! z options) (hashtable-delete! frontier z))
                 ('tank (push! z options) (hashtable-delete! frontier z))))
             (news loc))
    (if (null? new)
        (random-element options)
        (random-element new)))
  (let walk ()
    (inc! j)
    (let ((loc* (next loc)))
      (m 'in (dir->instr (- loc* loc)))
      (run-until-halt m)
      (match (read-output m)
        ((0) (hashtable-set! g loc* 'wall))
        ((1) (hashtable-set! g loc* 'open) (set! loc loc*))
        ((2) (hashtable-set! g loc* 'tank) (set! loc loc*) (set! *tank* loc)))
      (when (zero? (hashtable-size frontier))
        (showme loc)
        (format #t "~a ~a~%" j (hashtable-size frontier)))
      (unless (zero? (hashtable-size frontier))
        (when (zero? (mod j 10000))
          (showme loc)
          (format #t "~a ~a~%" j (hashtable-size frontier)))
        (walk)))))

(define (partA)
  (bfs-distance 0 *tank* map-adjacent))

(define (partB)
  (v:fold (hashtable-values (bfs-result-distances (bfs *tank* map-adjacent)))
          0
          max))

(define (solve)
  (random-walk)
  (display-ln (list (partA) (partB))))

(define (map-adjacent z)
  (filter (lambda (z)
            (memq (hashtable-ref g z 'idk) '(open tank)))
          (news z)))

(define (showme loc)
  (define-values (xlo xhi ylo yhi)
    (bounding-box-C (vector->list (hashtable-keys g))))
  (do ((i (1- xlo) (1+ i)))
      ((> i (1+ xhi)))
    (do ((j (1- ylo) (1+ j)))
        ((> j (1+ yhi)) (newline))
      (let ((z (make-rectangular i j)))
        (cond ((eqv? z loc)
               (display-with-foreground 'red #\@))
              (else
               (match (hashtable-ref g (make-rectangular i j) 'idk)
                 ('idk (display-with-foreground 'blue #\?))
                 ('wall (display-with-foreground 'green #\#))
                 ('open (display #\space))
                 ('tank (display-with-foreground 'red #\O)))))))))
