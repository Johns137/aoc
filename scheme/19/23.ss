(load "~/code/advent/load.ss")

(define prog
  (parse-advent comma-separated))

(define (network)
  (define V (make-vector 50))
  (do (( i 0 (1+ i)))
      ((= i 50) V)
    (let ((nic (cpu prog)))
      (send-input nic i)
      (run-until-halt nic)
      (vector-set! V i nic))))

(define (runA)
  (call/cc
   (lambda (done)
     (define net (network))
     (define i 0)
     (define Q '())
     (define (advance)
       (vector-for-each run-until-halt net))
     (define (collect-packets)
       (vector-for-each (lambda (nic)
                          (let ((out (read-output nic)))
                            (assert (zero? (mod (length out) 3)))
                            (set! Q `(,@Q ,@out))))
                        net))
     (define (send-packets)
       (let loop ((Q Q))
         (match Q
           ((255 _ y z ...)
            (done y))
           ((a x y z ...)
            (send-input* (vector-ref net a) (list x y)) (loop z))
           (() (set! Q '())))))
     (define (feed-1)
       (vector-for-each (lambda (nic)
                          (send-input nic -1))
                        net))
     (let loop ()
       (inc! i)
       (cond ((null? Q) (feed-1) (advance) (collect-packets))
             (else (send-packets) (advance) (collect-packets)))
       (loop)))))

(define (runB)
  (call/cc
   (lambda (done)
     (define net (network))
     (define Q '())
     (define nat-y #f)
     (define nat #f)
     (define i 0)
     (define (advance)
       (vector-for-each run-until-halt net))
     (define (collect-packets)
       (vector-for-each (lambda (nic)
                          (let ((out (read-output nic)))
                            (assert (zero? (mod (length out) 3)))
                            (set! Q `(,@Q ,@out))))
                        net))
     (define (reboot-idle)
       (when nat
         (let ((y (cadr nat))
               (nic (vector-ref net 0)))
           (when (and nat-y (= nat-y y))
             (done y))
           (set! nat-y y)
           (send-input* nic nat))))
     (define (feed-1)
       (vector-for-each (lambda (nic)
                          (send-input nic -1))
                        net))
     (define (send-packets)
       (let loop ((Q Q))
         (match Q
           ((255 x y z ...)
            (set! nat (list x y))
            (loop z))
           ((a x y z ...)
            (send-input* (vector-ref net a) (list x y))
            (loop z))
           (() (void))))
       (set! Q '()))
     (define (check-idle)
       (define idle? #t)
       (vector-for-each (lambda (nic)
                          (unless (null? (nic 'peek-in))
                            (set! idle? #f)))
                        net)
       (when idle? (reboot-idle)))
     (let loop ()
       (advance)
       (collect-packets)
       (cond ((null? Q) (feed-1))
             (else (send-packets) (check-idle)))
       (loop)))))
