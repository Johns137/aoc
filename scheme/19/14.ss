(load "~/code/advent/load.ss")

(define rules
  (parameterize ((advent-year 19) (advent-day 14))
    (map (lambda (rule)
           (match (string-tokenize rule (char-set-complement (char-set #\= #\>)))
             ((in out)
              (cons (with-input-from-string out comma-separated)
                    (n-tuples 2 (with-input-from-string in comma-separated))))))
         (parse-advent lines-raw))))

(define chemical-table
  (let ((table (make-hash-table)))
    (for-all (lambda (rule)
               (match rule
                 (((n x) xs ...)
                  (hashtable-set! table x (cons n xs)))))
             rules)
    table))

(define (chemical-ingredients chemical)
  (cond ((hashtable-ref chemical-table chemical #f)
         => (lambda (entry)
              (map cadr (cdr entry))))
        (else '())))

(define (lookup-recipe chemical)
  (hashtable-ref chemical-table chemical #f))

(define (produce chemicals fuel)
  (define requirements (make-hash-table))
  (define ore 0)
  (hashtable-set! requirements 'FUEL fuel)
  (let loop ((xs chemicals))
    (match xs
      ((x xs ...)
       (let ((n (hashtable-ref requirements x 0)))
         (match (lookup-recipe x)
           ((r . ys)
            (let ((q (quotient (+ n r -1) r)))
              (for-all (lambda (ingredient)
                         (hashtable-update! requirements
                                            (cadr ingredient)
                                            (lambda (m)
                                              (+ m (* q (car ingredient))))
                                            0))
                       ys)))
           (else (void)))
         (loop xs)))
      (else (hashtable-ref requirements 'ORE 0)))))

(define (solve)
  (define seen (make-hash-table))
  (define chemicals '())
  (let dfs ((x 'FUEL))
    (unless (hashtable-ref seen x #f)
      (hashtable-set! seen x #t)
      (for-all dfs (chemical-ingredients x))
      (push! x chemicals)))
  (let bin ((lo 1) (hi (inexact->exact 1e12)))
    (if (< hi lo)
        (values (produce chemicals 1) hi)
        (let ((x (ash (+ lo hi) -1)))
          (let ((ore (produce chemicals x)))
            (if (<= ore 1e12)
                (bin (1+ x) hi)
                (bin lo (1- x))))))))
