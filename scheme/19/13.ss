(load "~/code/advent/load.ss")

(define intcode-13
  (parameterize ((advent-year 19) (advent-day 13))
    (parse-advent comma-separated)))

(define empty 0)
(define (empty? x) (= empty x))
(define wall 1)
(define (wall? x) (= wall x))
(define block 2)
(define (block? x) (= block x))
(define horizontal-paddle 3)
(define (horizontal-paddle? x) (= horizontal-paddle x))
(define ball 4)
(define (ball? x) (= ball x))

(define *ball-x*)
(define *paddle-x*)
(define *score*)
(define *screen13* (make-eqv-hashtable))

(define (paint machine)
  (let loop ((instructions (read-output machine)))
    (match instructions
      ((-1 0 score instructions ...)
       (set! *score* score)
       (loop instructions))
      ((x y pixel instructions ...)
       (when (ball? pixel)
         (set! *ball-x* x))
       (when (horizontal-paddle? pixel)
         (set! *paddle-x* x))
       (hashtable-set! *screen13* (make-rectangular x y) pixel)
       (loop instructions))
      (else (void)))))

(define (locate object)
  (filter-map (lambda (z.o)
                (and (= (cdr z.o) object)
                     (car z.o)))
              (vector->list (hashtable-cells *screen13*))))

(define (update machine)
  (run-until-halt machine)
  (paint machine))

(define (partA)
  (define m (cpu intcode-13))
  (update m)
  (length (locate block)))

(define (partB)
  (define m (cpu intcode-13))
  (store! m 0 2)
  (let run ()
    (update m)
    (unless (done? m)
      (send-input m (sign (- *ball-x* *paddle-x*)))
      (run)))
  *score*)
