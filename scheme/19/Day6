# -*- mode: org -*-
#+title: [[https://adventofcode.com/2019/day/6][Day 6: Universal Orbit Map]]

  At first I thought the problem was over a graph, which would make
  the count in part A more interesting. Anyhow, first we clear our
  throats, we parse simply into strings, and we put the tree into
  hashtables for quicker lookups.

#+begin_src scheme :session :exports code :tangle 6.ss
(load "~/code/advent/load.ss")
(advent-year 19)
(advent-day 6)

(define solar-system
  (let ((children (make-hashtable string-hash string=?))
        (parents (make-hashtable string-hash string=?)))
    (for-all (lambda (pq)
               (let ((p (substring pq 0 3))
                     (q (substring pq 4 7)))
                 (hashtable-set! parents q p)
                 (hashtable-update! children
                                    p
                                    (lambda (qs)
                                      (cons q qs))
                                    '())))
             (parse-advent lines-raw))
    (lambda (me)
      (case me
        ((parents) parents)
        ((children) children)))))

(define (children planet)
  (hashtable-ref (solar-system 'children) planet '()))

(define (parent planet)
  (hashtable-ref (solar-system 'parents) planet #f))
#+end_src

#+RESULTS:
: #<void>

** Part A

  Now, some solving. We count the orbits by starting at ~"COM"~, by
  keeping track of the depth while traversing the tree.

#+begin_src scheme :session :exports both :tangle 6.ss
(define (count-orbits planet)
  (let ((count 0))
    (let walk ((p planet) (d 1))
      (for-all (lambda (q)
                 (set! count (+ count d))
                 (walk q (1+ d)))
               (children p)))
    count))

(count-orbits "COM")
#+end_src

#+RESULTS:
: 292387

** TODO Part B

  The second half is a little more fun. To calculate the er... orbital
  transfers... we find the paths from the root ~"COM"~ to the target
  planets. With the paths in hand, we find where they diverge (which
  is at their least common ancestor). Given that, the transfers are
  found by adding the lengths of the remaining parts of the
  paths. First, paths:

#+begin_src scheme :session :exports code :tangle 6.ss
(define (solar-path planet)
  (let walk ((planet planet) (path '()))
    (cond ((parent planet) => (lambda (p)
                                (walk p (cons p path))))
          (else path))))
#+end_src

#+RESULTS:
: #<void>

  Last, transfers:

#+begin_src scheme :session :exports both :tangle 6.ss
(define (orbital-transfers P Q)
  (let walk ((ps (solar-path P)) (qs (solar-path Q)))
    (if (string=? (car ps) (car qs))
        (walk (cdr ps) (cdr qs))
        (+ (length ps) (length qs)))))

(orbital-transfers "SAN" "YOU")
#+end_src

#+RESULTS:
: 433

