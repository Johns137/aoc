(include "~/code/advent/load.ss")
(advent-year 19)
(advent-day 2)

(define (part-a)
  (reset!)
  (seed! 12 2)
  (machine)
  (out))

(define (part-b)
  (let ((target 19690720))
    (let-values (((dx dy base) (dseed 0 0)))
      (let-values (((xt yt) (div-and-mod (- target base) dx)))
        (+ yt (* 100 xt))))))

(define (dseed x y)
  (reset!)
  (seed! x y)
  (machine)
  (let ((x0 (out)))
    (reset!)
    (seed! (1+ x) y)
    (machine)
    (let ((dx (- (out) x0)))
      (reset!)
      (seed! x (1+ y))
      (machine)
      (let ((dy (- (out) x0)))
        (values dx dy x0)))))

(define (seed! a b)
  (store! 1 a)
  (store! 2 b))

(define (machine)
  (let run ((ip 0))
    (when (match (fetch ip)
            (1 (store! (fetch (+ ip 3))
                       (+ (val (+ ip 1))
                          (val (+ ip 2))))
               'continue)
            (2 (store! (fetch (+ ip 3))
                       (* (val (+ ip 1))
                          (val (+ ip 2))))
               'continue)
            (99 #f)
            (else (error 'run "bad opcode" (fetch ip))))
      (run (+ ip 4)))))

;; opcode lib
(define intcode
  (parse-advent comma-separated))
(define memory
  (list->vector intcode))
(define (fetch addr)
  (vector-ref memory addr))
(define (val addr)
  (fetch (fetch addr)))
(define (store! addr val)
  (vector-set! memory addr val))
(define reset!
  (case-lambda
    (() (set! memory (list->vector intcode)))
    ((intcode) (set! memory (list->vector intcode)))))
(define (out)
  (fetch 0))

