# -*- mode: org -*-
#+title: Intcode

  There are many puzzles involving this year's assembly language. So
  many that I'll write about them in one place. 

** Interpreter

  Intcode programs are run as local state cells that accept messages
  that determine actions. The components are:

  - instruction pointer ~ip~
  - relative pointer ~relative-base~
  - status (one of ~ok~, ~blocking-in~, ~out~, ~done~)
  - first level of memory ~cache1~ which is initially the "source
    code".
  - second level of memory ~cache2~ implemented as a hashmap.
  - values written in stored in a queue ~in~.
  - output values stored in stack ~out~.
  - The meat of it all is ~step~ which executes a single
    instruction. When called from outside, the status is first
    cleared. The rationale was to first pass output before resuming
    execution for for [[./7.ss][Day7]].
  - Various other inner procedures for examining state.

#+begin_src scheme :exports code
(define (cpu intcode)
  (define ip 0)
  (define relative-base 0)
  (define status 'ok)
  (define cache1 `#(,@intcode))
  (define cache2 (make-eq-hashtable))
  (define size (vector-length cache1))
  (define in '())
  (define out '())

  (define (ip! dx)
    (set! ip (+ ip dx)))

  (define (rb! dx)
    (set! relative-base (+ relative-base dx)))
  
  (define (store! addr val)
    (if (fx< addr size)
        (vector-set! cache1 addr val)
        (hashtable-set! cache2 addr val)))
  
  (define (ref addr)
    (if (fx< addr size)
        (vector-ref cache1 addr)
        (hashtable-ref cache2 addr 0)))
  
  (define (val opcode param)
    (case (digit-at param opcode)
      ((1) (ref (+ ip param)))
      ((2) (ref (+ relative-base (ref (+ ip param)))))
      ((0) (ref (ref (+ ip param))))))

  (define (addr opcode param)
    (case (digit-at param opcode)
      ((2) (+ relative-base (ref (+ ip param))))
      ((0) (ref (+ ip param)))
      ((1) (error 'machine-addr "addr is immediate" opcode param))))
  
  (define (step)
    (let ((op (ref ip)))
      (case (fxmod op 100)
        ((1) (store! (addr op 3) (+ (val op 1) (val op 2))) (ip! 4))
        ((2) (store! (addr op 3) (* (val op 1) (val op 2))) (ip! 4))
        ((3) (if (null? in) (set! status 'blocking-in)
                 (begin (set! status 'ok) (store! (addr op 1) (pop! in)) (ip! 2))))
        ((4) (set! status 'out) (push! (val op 1) out) (ip! 2))
        ((5) (if (zero? (val op 1)) (ip! 3) (set! ip (val op 2))))
        ((6) (if (zero? (val op 1)) (set! ip (val op 2)) (ip! 3)))
        ((7) (store! (addr op 3) (if (< (val op 1) (val op 2)) 1 0)) (ip! 4))
        ((8) (store! (addr op 3) (if (= (val op 1) (val op 2)) 1 0)) (ip! 4))
        ((9) (rb! (val op 1)) (ip! 2))
        ((99) (set! status 'done))
        (else (error 'intcode "bad opcode" op)))))

  (define (dump)
    `(ip ,ip rb ,relative-base in ,in out ,out status ,status))

  (define (mem)
    `(cache1 ,cache1 cache2 ,cache2))

  (define (reset!)
    (set! cache1 `#(,@intcode))
    (set! cache2 (make-eq-hashtable))
    (set! ip 0)
    (set! relative-base 0)
    (set! in '())
    (set! out '())
    (set! status 'ok))

  (define (swap! program)
    (set! intcode program))
  
  (lambda (me . args)
    (case me
      ((step) (set! status 'ok) (step) status)
      ((in) (set! in `(,@in ,@args)) (set! status 'ok))
      ((out) (if (null? out) 'no-out (car out)))
      ((read-out) (let ((tmp (reverse out))) (set! out '()) tmp))
      ((status) status)
      ((mem) (if (null? args) (mem) (apply ref args)))
      ((ip) ip)
      ((rb) relative-base)
      ((ref) (apply ref args))
      ((swap!) (apply swap! args))
      ((reset!) (reset!))
      ((set-mem!) (apply store! args))
      ((dump) (dump))
      (else (error 'cpu "unknown message" me)))))
#+end_src

  The complete implementation of the interpreter is above, though the
  supporting functions are omitted. They can be found inside
  [[./../../code/intcode.ss][intcode.ss]].

** Load

#+BEGIN_SRC scheme :session :exports code
(load "~/code/advent/load.ss")
(advent-year 19)
#+END_SRC

#+RESULTS:
: #<void>

** [[https://adventofcode.com/2019/day/5][Day 5: Sunny with a Chance of Asteroids]]
  
   Day 5 introduced parameter modes (which determine how to write and
   read things), i/o, and branching. That is handled above, so what
   remains is very simply:

#+begin_src scheme :session :exports both :results output
(define intcode-5
  (parameterize ((advent-day 5))
    (parse-advent comma-separated)))

(define (run-intcode program seed)
  (define M (cpu program))
  (send-input M seed)
  (run-until-halt M)
  (get-output M))

(display `((5A ,(run-intcode intcode-5 1))
           (5B ,(run-intcode intcode-5 5))))
#+end_src

#+RESULTS:
| 5A | 7265618 |
| 5B | 7731427 |


** [[https://adventofcode.com/2019/day/7][Day 7: Amplification Circuit]]
  
   Day 7 was tricker, at least for me. Here, we need to connect
   machines first in a feed back loop, passing inputs and
   outpus. After seeding them with various inputs and outputs we're
   asked to find the maximum output.

   The strategy is to define connections as thunks and hold them in a
   queue. In these thunks, the input machine is run until it halts or
   it needs input. Whenever it produces output it is passed to the
   receiving machine, before resuming execution. If a thunk's sending
   machine is ~'done~, that thunk is dropped. The process continues
   until the target machine is done.

#+begin_src scheme :session :exports code
(define intcode-7
  (parameterize ((advent-day 7))
    (parse-advent comma-separated)))

(define (feed M N)
  (lambda ()
    (let run ()
      (case (step M)
        ((out) (N 'in (M 'out)) (run))
        ((blocking-in) 'blocked)
        ((done) 'done)
        (else (run))))))

(define (run7 phase-settings)
  (define-syntax define-network
    (lambda (x)
      (syntax-case x (=> <- =?)
        ((_ (A ...) ((x => y) ...) ((m <- phase) ...) (=? T))
         #'(let ((A (cpu intcode-7)) ...)
             (let ((loop (list (feed x y) ...)))
               (m 'in phase) ...
               (let run ()
                 (if (eq? 'done (T 'status))
                     (T 'out)
                     (let ((action (pop! loop)))
                       (let ((result (action)))
                         (unless (eq? result 'done)
                           (set! loop `(,@loop ,action)))
                         (run)))))))))))
  (let-values (((p h a s e) (apply values phase-settings)))
    (define-network
      (P H A S E)
      ((P => H) (H => A) (A => S) (S => E) (E => P))
      ((P <- p) (H <- h) (A <- a) (S <- s) (E <- e) (P <- 0))
      (=? E))))
#+end_src

#+RESULTS:
: #<void>

  As an aside, I don't think the syntax transformer is right. The
  reason is that I don't understand the different expansion phases and
  how capture works. It does "work" when run from a mutable top level
  though... so I leave it for now.

  Anyhow, finding the best result and printing:

#+BEGIN_SRC scheme :session :exports both :results output
(define (best-configuration phases)
  (apply max (map run7 (permutations phases))))

(display `((7A ,(best-configuration '(0 1 2 3 4)))
           (7B ,(best-configuration '(5 6 7 8 9)))))
#+END_SRC

#+RESULTS:
| 7A |   116680 |
| 7B | 89603079 |

** [[https://adventofcode.com/2019/day/9][Day 9: Sensor Boost]]

  The main aspect to day 9's puzzle was adding the opaquely described
  relative pointer. In fact, the function used in Day5 can be used
  here!

#+BEGIN_SRC scheme :session :exports both :results output
(define intcode-9
  (parameterize ((advent-day 9))
    (parse-advent comma-separated)))

(display `((9A ,(run-intcode intcode-9 1))
           (9B ,(run-intcode intcode-9 2))))
#+END_SRC

#+RESULTS:
| 9A | 3335138414 |
| 9B |      49122 |

** [[https://adventofcode.com/2019/day/11][Day 11: Space Police]]

  Day 9's description promises the intocde spec is fully laid out. Day
  11's puzzle puts it to use! An intcode instance is to paint a grid.
  It takes as input the color of its current location and responds
  accordingly. I like using complex numbers for grid problems, since
  the coordinates are packed into one number, and rotations are
  multiplicaiton.

#+BEGIN_SRC scheme :session :exports code
(define intcode-11
  (parameterize ((advent-day 11))
    (parse-advent comma-separated)))

(define (turn-right dir) (* dir 0-i))
(define (turn-left dir) (* dir 0+i))
(define white 1)
(define black 0)
(define (white? color) (= color white))

(define (calculate-paint M color)
  (send-input M color)
  (run-until-halt M)
  (let ((instructions (read-output M)))
    (and (not (null? instructions)) instructions)))

(define (painter M color)
  (define location 0)
  (define direction 0+i)
  (define visited (make-eqv-hashtable))
  (define colors (make-eqv-hashtable))
  (when (white? color)
    (hashtable-set! colors location white))
  (let run ()
    (let ((instructions (calculate-paint M (hashtable-ref colors location black))))
      (when instructions
        (hashtable-set! visited location #t)
        (if (white? (car instructions))
            (hashtable-set! colors location white)
            (hashtable-delete! colors location))
        (if (white? (cadr instructions))
            (set! direction (turn-right direction))
            (set! direction (turn-left direction)))
        (set! location (+ location direction))
        (run))))
  (assert (done? M))
  (values colors visited))
#+END_SRC

#+RESULTS:
: #<void>

  First part asks how many colors squares are painted when seeded with
  black.

#+BEGIN_SRC scheme :session :exports both :results output
(let-values (((_ visited) (painter (cpu intcode-11) black)))
  (display (list '11A (vector-length (hashtable-cells visited)))))
#+END_SRC

#+RESULTS:
| 11A | 2883 |


  Second part asks for a message that gets painted when seeded with
  white.

#+BEGIN_SRC scheme :session :exports code
(define (display-message colors)
  (let ((zs (map conjugate (vector->list (hashtable-keys colors)))))
    (advent-ssvg (zs->ssvg zs) "Day11.svg")))

(let-values (((colors _) (painter (cpu intcode-11) white)))
    (display-message colors))
#+END_SRC

#+RESULTS:
: #t

#+caption registration identifier
[[./../../output/Day11.svg][Day11]]

