(load "~/code/advent/load.ss")
(advent-year 19)
(advent-day 11)

(define intcode
  (parse-advent comma-separated))

(define (turn-right dir)
  (* dir 0-i))
(define (turn-left dir)
  (* dir 0+i))

(define (provide m color)
  (m 'in color))

(define (expect m)
  (m 'step)
  (m 'run)
  (and (not (eq? 'done (m 'status)))
       (let ((clr1 (m 'read-out)))
         (m 'step)
         (m 'run)
         (and (not (eq? 'done (m 'status)))
              (let ((clr2 (m 'read-out)))
                (and (number? clr1)
                     (number? clr2)
                     (list clr1 clr2)))))))

(define (part-a)
  (define m (cpu intcode))
  (define visited (make-eqv-hashtable))
  (define colors (make-eqv-hashtable))
  (define loc 0)
  (define dir 0+i)
  (let run ()
    (provide m (hashtable-ref colors loc 0))
    (let ((instrs (expect m)))
      (when instrs
        (hashtable-set! visited loc 1)
        (if (zero? (car instrs))
            (hashtable-delete! colors loc)
            (hashtable-set! colors loc 1))
        (if (zero? (cadr instrs))
            (set! dir (turn-left dir))
            (set! dir (turn-right dir)))
        (set! loc (+ loc dir))
        (run))))
  (assert (done? m))
  (vector-length (hashtable-cells visited)))

(define (part-b)
  (define X (matrix 40 6))
  (define m (cpu intcode))
  (define visited (make-eqv-hashtable))
  (define colors (make-eqv-hashtable))
  (define loc 0)
  (define dir 0+i)
  (matrix-tabulate! X (lambda x #\.))
  (hashtable-set! colors loc 1)
  (let run ()
    (provide m (hashtable-ref colors loc 0))
    (let ((instrs (expect m)))
      (when instrs
        (hashtable-set! visited loc 1)
        (if (zero? (car instrs))
            (hashtable-delete! colors loc)
            (hashtable-set! colors loc 1))
        (if (zero? (cadr instrs))
            (set! dir (turn-left dir))
            (set! dir (turn-right dir)))
        (set! loc (+ loc dir))
        (run))))
  (assert (done? m))
  (vector-for-each (lambda (z)
                     (matrix-set! X (real-part z) (abs (imag-part z)) #\#))
                   (hashtable-keys colors))
  (vector-for-each (lambda (row)
                     ((compose display-ln list->string vector->list) row))
                   (matrix-transpose X)))

(define (done? m)
  (eq? 'done (m 'status) ))
