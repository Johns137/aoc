(load "~/code/advent/load.ss")
(advent-year 19)
(advent-day 11)

(define intcode
  (parse-advent comma-separated))

(define (partA)
  (define M (cpu intcode))
  (let-values (((_ visited) (painter M black)))
    (display-ln (vector-length (hashtable-cells visited)))))

(define (partB)
  (define M (cpu intcode))
  (let-values (((colors _) (painter M white)))
    (display-message colors)))

(define (turn-right dir) (* dir 0-i))
(define (turn-left dir) (* dir 0+i))
(define white 1)
(define black 0)
(define (white? color) (= color white))

(define (calculate-paint M color)
  (send-input M color)
  (run-until-halt M)
  (let ((instructions (get-output M)))
    (and (not (null? instructions)) instructions)))

(define (painter M color)
  (define location 0)
  (define direction 0+i)
  (define visited (make-eqv-hashtable))
  (define colors (make-eqv-hashtable))
  (when (white? color)
    (hashtable-set! colors location white))
  (let run ()
    (let ((instructions (calculate-paint M (hashtable-ref colors location black))))
      (when instructions
        (hashtable-set! visited location #t)
        (if (white? (car instructions))
            (hashtable-set! colors location white)
            (hashtable-delete! colors location))
        (if (white? (cadr instructions))
            (set! direction (turn-right direction))
            (set! direction (turn-left direction)))
        (set! location (+ location direction))
        (run))))
  (assert (done? M))
  (values colors visited))

(define (display-message colors)
  (define x-lo (greatest-fixnum))
  (define y-lo (greatest-fixnum))
  (define x-hi (least-fixnum))
  (define y-hi (least-fixnum))
  (vector-for-each (lambda (z)
                     (set! x-lo (min x-lo (real-part z)))
                     (set! x-hi (max x-hi (real-part z)))
                     (set! y-lo (min y-lo (imag-part z)))
                     (set! y-hi (max y-hi (imag-part z))))
                   (hashtable-keys colors))
  (do ((y y-hi (1- y)))
      ((< y y-lo))
    (do ((x x-lo (1+ x)))
        ((> x x-hi)(newline))
      (if (white? (hashtable-ref colors (make-rectangular x y) black))
          (display #\@)
          (display #\space)))))

