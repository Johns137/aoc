# -*- mode: org -*-
#+title: [[https://adventofcode.com/2019/day/16][Day 16: Flawed Frequency Transmission]]

#+begin_src j :session :exports code
load '~/code/advent/code/biblio.ijs'
digits=: _1 }. 0 "."0 advent_input 19 16
unbase10=: 10&#:^:_1
#+end_src

#+RESULTS:

  Base pattern is ~0 1 0 _1~ and the ~i~ th row of the pattern matrix
  has each of those digits replicated ~(i+1)~ times, cycled
  indefinitely, with first 0 dropped. With part A input demands, an
  honest matrix is possible ~+/ . *~.

#+begin_src j :session :exports code
NB. part A
base_pat=: 13 : '}. (>:x) $ , y&$"0 ] 0 1 0 _1'
base_mat=: base_pat"0 (>: @ i.)
flawed_ftA=: 8 {. (10 | [: | ] (+/ . *)~ base_mat @ #) ^: 100
#+end_src

#+RESULTS:

  Perhaps it's not worth the gymnastics and it would be simpler to
  just build the huge list first then drop? For this part, matrix
  multiplication is pointedly not possible. Puzzle inputs are
  suspiciously near the end, however, which facilitates a lame-feeling
  partial sum approach ~+/\.~ (triangle of 1s, in this range).

#+BEGIN_SRC j :session :exports code
NB. part B
drop_offset=: (]}.~#|10#.7{.]),]$~#*[:<.#%~(10000*#)-10#.7{.]
flawed_ftB=: 7 {. [: (10 | +/\.) ^: 100 drop_offset
#+END_SRC

  Visualize the pattern with viewmat:

#+BEGIN_SRC j :session :exports code 
NB. Visual
output_pat =: 3 : 0
load 'viewmat'
pal=.3 3 $ 0 0 100 0 100 100 200 150 150
pal viewmat base_mat 128
savemat_jviewmat_'~/code/advent/output/Day16.png'
NB. closeall_jviewmat_''
)
#+END_SRC

#+RESULTS:

[[file:~/code/advent/output/Day16.png][Base pattern matrix]]
