# -*- mode: org -*-
#+title: [[https://adventofcode.com/2019/day/12][Day 12: The N-Body Problem]]

* Moons

  "N-body" simulation problem. Moons update velocity based on relative
  position of planets. For each moon, for each dimension, the velocity
  is bumped by the sum of the signums of the differences between that
  moon and the others. Position is bumped by adding it to the new
  velocity.

#+BEGIN_SRC j :session :exports code
moons =: (|: 4 3 $ 3 2 _6 _13 18 10 _8 _1 13 5 10 4) ,. (3 4 $ 0)
('position';(4{."1 moons)) ,: ('velocity';(4}."1 moons))
#+END_SRC

#+RESULTS:
: ┌────────┬────────────┐
: │position│ 3 _13 _8  5│
: │        │ 2  18 _1 10│
: │        │_6  10 13  4│
: ├────────┼────────────┤
: │velocity│0 0 0 0     │
: │        │0 0 0 0     │
: │        │0 0 0 0     │
: └────────┴────────────┘

  So how to write the update? Let's isolate the position, do a
  difference table, take signum, and sum over dimensions. Add that to
  the whole state, and shift to add velocity to the position.

#+BEGIN_SRC j :session :exports both
step =: ] + (4|.!.0])"1 + [: (],.]) ([: ([:+/[:*[-/[) 4&{.)"1
(step ^: 0; step ^: 1 ; step ^: 2) moons
#+END_SRC

#+RESULTS:
: ┌────────────────────┬───────────────────────┬───────────────────────┐
: │ 3 _13 _8  5 0 0 0 0│ 2 _10 _7 2 _1  3  1 _3│_1 _4 _5 _3 _3  6  2 _5│
: │ 2  18 _1 10 0 0 0 0│ 3  15  2 9  1 _3  3 _1│ 5  9  8  7  2 _6  6 _2│
: │_6  10 13  4 0 0 0 0│_3   9 10 5  3 _1 _3  1│ 3  7  4  7  6 _2 _6  2│
: └────────────────────┴───────────────────────┴───────────────────────┘

  Cool! The missing ingredient is /energy/. Energy is the sum of
  absolute values of components. Potential is that for position,
  kinetic is that for velocity. Total energy is the sum of the
  component-wise product of the two.

#+BEGIN_SRC j :session exports code
energy =: [: +/ [: (_4&{. * 4&{.) [: +/ |
#+END_SRC

#+RESULTS:

** PartA

#+BEGIN_SRC j :session :exports both
energy step ^: 1000 moons
#+END_SRC   

#+RESULTS:
: 14780


* Period

  Now the trickier part. We seek the period of the system, which is
  promised to be rather large.

  The axis are independent, so we can calculate it by looking at one
  dimension at a time. The overall period is the least common multiple
  of the individual ones.

#+BEGIN_SRC j :session :exports code
period =: 4 : 0
n=. 1 [ z=. step ] y=. 1 8 $ x{y
while. -. z-:y do. n=. n+1 [z=. step z end. n
)
#+END_SRC

#+RESULTS:

  Because I still haven't figured out org timeout issues with J, only
  the code for the solution is be presented.

#+BEGIN_SRC j :session :exports both
*./ period&moons"0 i.3
#+END_SRC

#+RESULTS:

  It takes around ~600~ ms to find the answer on my input ~moons~.
